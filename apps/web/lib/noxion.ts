import { createDefaultConfig, PluginManager } from '@noxion/core'
import { createCommentsPlugin } from '@noxion/plugin-comments'
import { createAnalyticsPlugin } from '@noxion/plugin-analytics'
import { createSEOPlugin } from '@noxion/plugin-seo'

// Check environment variables for comments plugin
const hasSupabaseConfig = process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
console.log('Supabase config available:', hasSupabaseConfig)
console.log('SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'SET' : 'NOT SET')
console.log('SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET')

// Create plugins array
const plugins = [
  // Always include demo plugins with configuration
  createAnalyticsPlugin({
    trackingId: process.env.NEXT_PUBLIC_GA_TRACKING_ID || 'GA-DEMO-123',
    enablePageViews: true,
    enableEvents: false,
    debugMode: process.env.NODE_ENV === 'development',
    customDimensions: {
      'dimension1': 'noxion-blog',
      'dimension2': 'next-js'
    }
  }),
  
  createSEOPlugin({
    siteName: process.env.NEXT_PUBLIC_SITE_NAME || 'Noxion Blog',
    defaultImage: '/og-default.jpg',
    enableOpenGraph: true,
    enableTwitterCards: true,
    twitterHandle: process.env.NEXT_PUBLIC_TWITTER_HANDLE,
    autoGenerateDescriptions: true,
    keywords: ['blog', 'noxion', 'cms', 'notion', 'next.js']
  }),
]

// Add comments plugin if Supabase config is available
if (hasSupabaseConfig) {
  console.log('Adding comments plugin...')
  plugins.push(createCommentsPlugin({
    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    autoApprove: false,
    moderationEnabled: true,
  }))
} else {
  console.log('Skipping comments plugin - Supabase config not available')
}

console.log('Total plugins configured:', plugins.length)

// Create the Noxion configuration
const config = createDefaultConfig(plugins)

// Create and export the plugin manager
export const pluginManager = new PluginManager(config)

// Export as noxion for API routes
export const noxion = pluginManager

// Initialize plugins
pluginManager.initializePlugins().catch(console.error)

// Export enhanced functions that use plugins
export const getPosts = () => pluginManager.getEnhancedPosts()
export const getPost = (slug: string) => pluginManager.getEnhancedPost(slug)

// Get all slugs for static generation
export const getAllSlugs = async (): Promise<string[]> => {
  const posts = await getPosts()
  return posts.map(post => post.slug)
}

// Export components for use in the app
export const getCommentsComponent = () => pluginManager.getComponent('CommentsSection')